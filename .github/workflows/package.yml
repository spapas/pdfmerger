name: Python package

on: 
  push:
    tags:
    - '*'

jobs:
  build:

    runs-on: windows-latest
    permissions:
      contents: write
    strategy:
      matrix:
        python-version: ["3.10"]

    steps:
      - uses: actions/checkout@v3
      - name: Setup Python # Set Python version
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      # Install pip and pytest
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Package dir
        run: pyinstaller -F -w pdfmerger.py --additional-hooks-dir=.  --onedir --noconsole
      - uses: vimtor/action-zip@v1
        name: Zip the directory release
        with:
          files: dist/pdfmerger
          dest: pdfmerger.zip
      - name: Package exe
        run: pyinstaller -F -w pdfmerger.py --additional-hooks-dir=.  --onefile --noconsole
      - uses: actions/upload-artifact@v3
        with:
          name: pdfmerger.zip
          path: ${{ github.workspace }}/pdfmerger.zip
      - uses: actions/upload-artifact@v3
        with:
          name: pdfmerger.exe
          path: ${{ github.workspace }}/dist/pdfmerger.exe
      
      - uses: ncipollo/release-action@v1
        name: Publish Release
        with:
          token: ${{secrets.GITHUB_TOKEN}}
          artifacts: "pdfmerger.zip,dist/pdfmerger.exe"
          
      
      #- name: Upload pytest test results
      #  uses: actions/upload-artifact@v3
      #  with:
      #    name: pytest-results-${{ matrix.python-version }}
      #    path: junit/test-results-${{ matrix.python-version }}.xml
      #  # Use always() to always run this step to publish test results when there are test failures
      #  if: ${{ always() }}
